const 
	baseDir = "../../..",
	sharedDir = baseDir + "/nodecommon",
	sharedHandlerDir = sharedDir + "/handlers",
	utils = require(sharedHandlerDir + "/util/common.js");

function FacebookPost() {
	/**
	 * The Post's concatenated id.
	 * @type {String} The Post's concatenated id.
	 */
	this.id = "";

	/**
	 * The Post's object id. This id is used for endpoints such as /picture.
	 * @type {String} The Post's object id.
	 */
	this.object_id = "";

	/**
	 * The Post's admin/creator. Only applicable to pages.
	 * @type {Array} An Array of String objects.
	 */
	this.admin_creator = [];

	/**
	 * Link caption in post that appears below name. The caption must be an 
	 * actual URLs and should accurately reflect the URL and associated 
	 * advertiser or business someone visits when they click on it.
	 * @type {String} The Post's caption.
	 */
	this.caption = "";

	/**
	 * The time the post was initially published. For a post about a life 
	 * event, this will be the date and time of the life event. Usually this 
	 * is a string that contains a date, which we need to pass to get a number
	 * representation.
	 * @type {Number} The post's timestamp.
	 */
	this.created_time = 0;

	/**
	 * A description of a link in the post (appears beneath the caption).
	 * @type {String} The Post's description.
	 */
	this.description = "";

	/**
	 * If this post is marked as hidden. Only applicable to Pages.
	 * @type {Boolean} Whether this Post is hidden.
	 */
	this.is_hidden = false;

	/**
	 * The link attached to this post.
	 * @type {String} The Post's attached link.
	 */
	this.link = "";

	/**
	 * The status message in the post.
	 * @type {String} The Post's message.
	 */
	this.message = "";

	/**
	 * The picture scraped from any link included with the post.
	 * @type {Array} An Array of String urls.
	 */
	this.picture = [];

	/**
	 * The shares count of this post.
	 * @type {Number} The Post's share count.
	 */
	this.shares = 0;

	/**
	 * Text from stories not intentionally generated by users, such as those 
	 * generated when two people become friends, or when someone else posts 
	 * on the person's wall.
	 * @type {String} The Post's story.
	 */
	this.story = "";

	/**
	 * The time when the post was created, last edited or the time of the 
	 * last comment that was left on the post. For a post about a life event, 
	 * this will be the date and time of the life event
	 * @type {Number} The Post's updated timestamp.
	 */
	this.updated_time = 0;
};

FacebookPost.prototype.setId = function(id) {
	if (id && String.isInstance(id)) {
		this.id = id;
	}

	return this;
};

FacebookPost.prototype.setObjectId = function(id) {
	if (id && String.isInstance(id)) {
		this.object_id = id;
	}

	return this;
};

FacebookPost.prototype.setAdminCreator = function(admins) {
	if (Array.isInstance(admins)) {
		this.admin_creator = admins;
	}

	return this;
};

FacebookPost.prototype.setCaption = function(caption) {
	if (caption && String.isInstance(caption)) {
		this.caption = caption;
	}

	return this;
};

FacebookPost.prototype.setCreatedTime = function(created) {
	if (Number.isInstance(created)) {
		this.created_time = created;
	} else if (String.isInstance(created)) {
		this.created_time = Date.parse(created);
	}

	return this;
};

FacebookPost.prototype.setDescription = function(description) {
	if (description && String.isInstance(description)) {
		this.description = description;
	}

	return this;
};

FacebookPost.prototype.setLink = function(link) {
	if (link && String.isInstance(link)) {
		this.link = link;
	}

	return this;
};

FacebookPost.prototype.setMessage = function(message) {
	if (message && String.isInstance(message)) {
		this.message = message;
	}

	return this;
};

FacebookPost.prototype.setPicture = function(picture) {
	if (Array.isInstance(picture)) {
		this.picture = picture;
	} else if (String.isInstance(picture)) {
		return this.setPicture([picture]);
	}

	return this;
};

FacebookPost.prototype.setShareCount = function(shares) {
	if (Number.isInstance(shares)) {
		this.shares = parseInt(shares);
	} else if (Object.isInstance(shares)) {
		return this.setShareCount(shares.count);
	}

	return this;
};

FacebookPost.prototype.setStory = function(story) {
	if (story && String.isInstance(story)) {
		this.story = story;
	}

	return this;
};

FacebookPost.prototype.setUpdatedTime = function(updated) {
	if (Number.isInstance(updated)) {
		this.updated_time = updated;
	} else if (String.isInstance(updated)) {
		this.updated_time = Date.parse(updated);
	}

	return this;
};

FacebookPost.prototype.getId = function() {
	return this.id || "";
};

FacebookPost.prototype.getObjectId = function() {
	return this.object_id || "";
};

FacebookPost.prototype.getAdminCreator = function() {
	return this.admin_creator || [];
};

FacebookPost.prototype.getCaption = function() {
	return this.caption || "";
};

FacebookPost.prototype.getCreatedTime = function() {
	return this.created_time || 0;
};

FacebookPost.prototype.getDescription = function() {
	return this.description || "";
};

FacebookPost.prototype.getLink = function() {
	return this.link || "";
};

FacebookPost.prototype.getMessage = function() {
	return this.message || "";
};

FacebookPost.prototype.getPicture = function() {
	return this.picture || [];
};

FacebookPost.prototype.getShareCount = function() {
	return this.shares || 0;
};

FacebookPost.prototype.getStory = function() {
	return this.story || "";
};

FacebookPost.prototype.getUpdatedTime = function() {
	return this.updated_time || 0;
};

FacebookPost.prototype.json = function() {
	var json = {};
	const fields = FacebookPost.Fields;
	json[fields.ID.value] = this.getId();
	return json;
};

FacebookPost.prototype.hasAllRequiredInformation = function() {
	switch (true) {
		case this.getId().isEmpty():
			Error.debugException(this);
			return false;

		default:
			break;
	}

	return true;
};

FacebookPost.Builder = function() {
	var post = new FacebookPost();

	return {
		withId : function(id) {
			post.setId(id);
			return this;
		},

		withObjectId : function(id) {
			post.setObjectId(id);
			return this;
		},

		withAdminCreator : function(admins) {
			post.setAdminCreator(admins);
			return this;
		},

		withCaption : function(caption) {
			post.setCaption(caption);
			return this;
		},

		withCreatedTime : function(created) {
			post.setCreatedTime(created);
			return this;
		},

		withDescription : function(description) {
			post.setDescription(description);
			return this;
		},

		withLink : function(link) {
			post.setLink(link);
			return this;
		},

		withMessage : function(message) {
			post.setMessage(message);
			return this;
		},

		withPicture : function(picture) {
			post.setPicture(picture);
			return this;
		},

		withShares : function(shares) {
			post.setShareCount(shares);
			return this;
		},

		withStory : function(story) {
			post.setStory(story);
			return this;
		},

		withUpdatedTime : function(updated) {
			post.setUpdatedTime(updated);
			return this;
		},

		withPostData : function(data) {
			if (data) {
				const fields = FacebookPost.Fields;

				return this
					.withId(data[fields.ID.value])
					.withObjectId(data[fields.OBJECT_ID.value])
					.withAdminCreator(data[fields.ADMIN_CREATOR.value])
					.withCaption(data[fields.CAPTION.value])
					.withCreatedTime(data[fields.CREATED_TIME.value])
					.withDescription(data[fields.DESCRIPTION.value])
					.withLink(data[fields.LINK.value])
					.withMessage(data[fields.MESSAGE.value])
					.withPicture(data[fields.PICTURE.value])
					.withShares(data[fields.SHARES.value])
					.withStory(data[fields.STORY.value])
					.withUpdatedTime(data[fields.UPDATED_TIME.value]);
			} else {
				return this;
			}
		},

		build : function() {
			return post;
		}
	};
};

FacebookPost.newBuilder = function() {
	return FacebookPost.Builder();
};

FacebookPost.Fields = {
	allFields : function() {
		const instance = this, keys = utils.getKeys(instance);
		return keys.map(key => instance[key]).filter(field => field.value);
	},

	allFieldValues : function() {
		return this.allFields().map(field => field.value);
	},

	fromValues : function(values) {
		const fields = this.allFields();

		if (Array.isInstance(values)) {
			return values
				.map(value => fields.filter(field => field.value == value)[0])
				.filter(field => field);
		}

		Error.debugException(values);
		return [];
	},

	ADMIN_CREATOR : {
		value : "admin_creator"
	},

	ADMIN_CREATOR : {
		value : "admin_creator"
	},

	CAPTION : {
		value : "caption"
	},

	CREATED_TIME : {
		value : "created_time",

		requiresObjectId : true
	},

	DESCRIPTION : {
		value : "description"
	},

	ID : {
		value : "id",

		requiresObjectId : true
	},

	LINK : {
		value : "link",

		requiresObjectId : true
	},

	MESSAGE : {
		value : "message"
	},

	OBJECT_ID : {
		value : "object_id"
	},

	PICTURE : {
		value : "picture",

		requiresObjectId : true
	},

	SHARES : {
		value : "shares"
	},

	STORY : {
		value : "story"
	},

	UPDATED_TIME : {
		value : "updated_time",

		requiresObjectId : true
	}
};

module.exports = FacebookPost;